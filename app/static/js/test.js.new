// Datos estáticos para las burbujas
const estilos = [
  "Deportiva", "Naked", "Adventure", "Cruiser", "Touring", 
  "Scooter", "Custom", "Trail", "Enduro", "Clásica"
];

const marcas = [
  "Honda", "Yamaha", "Kawasaki", "Suzuki", "BMW", "KTM", 
  "Ducati", "Triumph", "Harley-Davidson", "Royal Enfield", 
  "Aprilia", "Vespa", "Moto Guzzi", "Indian", "Husqvarna"
];

// Variables globales para el componente MagneticBubbles
let bubbleInstances = {};
let activeCanvas = null;

// Objeto global para almacenar respuestas
window.respuestas = window.respuestas || {
  estilos: {},
  marcas: {},
  experiencia: "",
  uso: "",
  acompanantes: "",
  consumo: "",
  precio: "",
  potencia: "",
  torque: "",
  cilindrada: "",
  uso_experto: "",
  acompanantes_experto: "",
  precio_experto: ""
};

// Al cargar el documento
document.addEventListener('DOMContentLoaded', function() {
  console.log("DOM cargado, inicializando test con MagneticBubbles...");
  
  // Asegurarse de que solo la primera pregunta esté visible
  document.querySelectorAll('.pregunta').forEach(element => {
    if (element.id === 'pregunta-1') {
      element.style.display = 'block';
      element.classList.add('active');
    } else {
      element.style.display = 'none';
      element.classList.remove('active');
    }
  });
  
  // Actualizar barra de progreso inicial
  updateProgressBar();
  
  // Inicializar test con MagneticBubbles
  initializeTest();
  
  // Configurar eventos de la interfaz
  setupEventListeners();
});

// Función para inicializar el test
function initializeTest() {
  try {
    console.log("Inicializando test con MagneticBubbles");
    
    // Inicializar la primera pregunta con MagneticBubbles
    initBubbles('estilos');
    
    console.log("MagneticBubbles inicializado correctamente");
  } catch (error) {
    console.error("Error al inicializar MagneticBubbles:", error);
    alert("Ha ocurrido un error al inicializar el test. Por favor, recarga la página.");
  }
}

// Inicializar las burbujas para una pregunta específica
function initBubbles(type) {
  console.log(`Inicializando burbujas para tipo: ${type}`);
  
  // Obtener el canvas adecuado
  const canvasId = `${type}-canvas`;
  const canvasElement = document.getElementById(canvasId);
  if (!canvasElement) {
    console.error(`Canvas element ${canvasId} not found`);
    return;
  }
  
  activeCanvas = type;
  
  try {
    // Determinar los datos a usar
    let items = [];
    if (type === 'estilos') {
      items = window.estilos || estilos;
    } else if (type === 'marcas') {
      items = window.marcas || marcas;
    }
    
    console.log(`Usando ${items.length} elementos para ${type}`);
    
    // Crear instancia de MagneticBubbles
    bubbleInstances[type] = new MagneticBubbles(canvasId, items, {
      minRadius: 30,
      maxRadius: 45,
      attractionForce: 0,
      initialImpulse: 1.5,
      textFont: '12px Arial, sans-serif'
    });
    
    // Configurar evento para capturar selecciones
    canvasElement.addEventListener('selection-changed', (e) => {
      const selections = e.detail.selections;
      window.respuestas[type] = selections;
      console.log(`Selecciones de ${type} actualizadas:`, selections);
    });
    
    console.log(`Burbujas de ${type} inicializadas correctamente`);
    
  } catch (error) {
    console.error(`Error al inicializar las burbujas de ${type}:`, error);
  }
}

// Reinicializar burbujas para una pregunta
function reinitBubbles(type) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].destroy();
    initBubbles(type);
    console.log(`Burbujas de ${type} reinicializadas`);
  }
}

// Aplicar impulso a las burbujas
function applyImpulseToBubbles(type, strength = 1.0) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].applyImpulse(strength);
  }
}

// Configurar eventos en la interfaz
function setupEventListeners() {
  // Configurar botones de navegación
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', navigatePrev);
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', navigateNext);
  }
  
  // Botón para reiniciar las burbujas
  const resetBtn = document.getElementById('reset-bubbles');
  if (resetBtn) {
    resetBtn.addEventListener('click', function() {
      if (activeCanvas && bubbleInstances[activeCanvas]) {
        bubbleInstances[activeCanvas].resetSelections();
        bubbleInstances[activeCanvas].applyImpulse(1.0);
      }
    });
  }
  
  // Evento en cambio de ventana para redimensionar
  window.addEventListener('resize', () => {
    if (activeCanvas && bubbleInstances[activeCanvas]) {
      // El componente MagneticBubbles maneja esto internamente
      console.log('Ventana redimensionada, el componente se ajustará automáticamente');
    }
  });
}

// Navegación a pregunta anterior
function navigatePrev() {
  const currentQuestion = document.querySelector('.pregunta.active');
  if (!currentQuestion) return;
  
  // Obtener el número de pregunta actual
  const currentId = currentQuestion.id;
  const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
  
  if (!match) return;
  
  let questionNum = parseInt(match[1]);
  const questionType = match[2]; // 'inexperto' o 'experto' o undefined
  
  // Guardar respuesta actual si hay select
  saveCurrentResponse(currentQuestion);
  
  // Ocultar pregunta actual
  currentQuestion.classList.remove('active');
  currentQuestion.style.display = 'none';
  
  let prevQuestionId;
  
  // Lógica para encontrar la pregunta anterior
  if (questionType) {
    // Estamos en una rama específica
    if (questionNum > 4) {
      // Ir a la pregunta anterior en la misma rama
      prevQuestionId = `pregunta-${questionNum-1}-${questionType}`;
    } else {
      // Volver a la pregunta 3 (experiencia)
      prevQuestionId = 'pregunta-3';
    }
  } else {
    // Preguntas iniciales 1-3
    if (questionNum > 1) {
      prevQuestionId = `pregunta-${questionNum-1}`;
      
      // Si volvemos a la pregunta 1, inicializar burbujas de estilos
      if (questionNum - 1 === 1) {
        setTimeout(() => {
          initBubbles('estilos');
        }, 100);
      }
    }
  }
  
  // Mostrar pregunta anterior
  if (prevQuestionId) {
    const prevQuestion = document.getElementById(prevQuestionId);
    if (prevQuestion) {
      prevQuestion.classList.add('active');
      prevQuestion.style.display = 'block';
      
      // Si la pregunta anterior es la 2, inicializar burbujas de marcas
      if (prevQuestionId === 'pregunta-2') {
        setTimeout(() => {
          initBubbles('marcas');
        }, 100);
      }
    }
  }
  
  // Actualizar estado del botón anterior
  document.getElementById('prev-btn').disabled = (prevQuestionId === 'pregunta-1');
  
  // Actualizar barra de progreso
  updateProgressBar(questionNum - 1);
}

// Navegación a siguiente pregunta
function navigateNext() {
  const currentQuestion = document.querySelector('.pregunta.active');
  if (!currentQuestion) return;
  
  // Obtener el número de pregunta actual
  const currentId = currentQuestion.id;
  const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
  
  if (!match) return;
  
  let questionNum = parseInt(match[1]);
  const questionType = match[2]; // 'inexperto' o 'experto' o undefined
  
  // Guardar respuesta actual
  saveCurrentResponse(currentQuestion);
  
  // Ocultar pregunta actual
  currentQuestion.classList.remove('active');
  currentQuestion.style.display = 'none';
  
  let nextQuestionId;
  
  // Encontrar la siguiente pregunta según el flujo
  if (questionNum === 3) {
    // Ramificación según nivel de experiencia
    const experienciaSelect = document.getElementById('experiencia');
    const path = experienciaSelect.value === 'experto' ? 'experto' : 'inexperto';
    nextQuestionId = `pregunta-4-${path}`;
  } else if (questionType) {
    // Seguimos en una rama específica
    const maxQuestion = questionType === 'experto' ? 9 : 7;
    
    if (questionNum < maxQuestion) {
      nextQuestionId = `pregunta-${questionNum+1}-${questionType}`;
    } else {
      // Final del test
      showCompletionModal();
      return;
    }
  } else {
    // Preguntas iniciales 1-3
    if (questionNum < 3) {
      nextQuestionId = `pregunta-${questionNum+1}`;
      
      // Si pasamos a la pregunta 2, inicializar burbujas de marcas
      if (questionNum + 1 === 2) {
        setTimeout(() => {
          initBubbles('marcas');
        }, 100);
      }
    }
  }
  
  // Mostrar siguiente pregunta
  if (nextQuestionId) {
    const nextQuestion = document.getElementById(nextQuestionId);
    if (nextQuestion) {
      nextQuestion.classList.add('active');
      nextQuestion.style.display = 'block';
    }
  }
  
  // Habilitar botón anterior
  document.getElementById('prev-btn').disabled = false;
  
  // Actualizar barra de progreso
  updateProgressBar();
}

// Guardar respuesta actual
function saveCurrentResponse(question) {
  // Guardar selección actual del select si existe
  const select = question.querySelector('select');
  if (select && select.id) {
    window.respuestas[select.id] = select.value;
    console.log(`Guardando respuesta: ${select.id} = ${select.value}`);
  }
}

// Actualizar barra de progreso
function updateProgressBar(questionNum) {
  const progressBar = document.getElementById('progress-bar');
  if (!progressBar) return;
  
  if (!questionNum) {
    const currentQuestion = document.querySelector('.pregunta.active');
    if (!currentQuestion) return;
    
    const currentId = currentQuestion.id;
    const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
    
    if (!match) return;
    
    questionNum = parseInt(match[1]);
  }
  
  const questionType = document.querySelector('.pregunta.active')?.id.match(/pregunta-\d+(?:-(\w+))?/)?.[1];
  
  let totalQuestions, progress;
  
  if (questionType === 'experto') {
    totalQuestions = 9;
    // Ajustar para preguntas 1-3 comunes + 4-9 experto
    progress = questionNum <= 3 ? questionNum : 3 + (questionNum - 3);
  } else if (questionType === 'inexperto') {
    totalQuestions = 7;
    // Ajustar para preguntas 1-3 comunes + 4-7 inexperto
    progress = questionNum <= 3 ? questionNum : 3 + (questionNum - 3);
  } else {
    // Preguntas comunes 1-3
    totalQuestions = 9; // Usamos el más largo como referencia
    progress = questionNum;
  }
  
  const percentage = (progress / totalQuestions) * 100;
  progressBar.style.width = `${percentage}%`;
}

// Mostrar modal de finalización
function showCompletionModal() {
  const modal = document.getElementById('completion-modal');
  if (modal) {
    modal.style.display = 'flex';
    
    // Confetti effect
    launchConfetti();
  }
}

// Efecto de confeti
function launchConfetti() {
  const canvas = document.createElement('canvas');
  canvas.style.position = 'fixed';
  canvas.style.top = '0';
  canvas.style.left = '0';
  canvas.style.width = '100%';
  canvas.style.height = '100%';
  canvas.style.pointerEvents = 'none';
  canvas.style.zIndex = '9999';
  document.body.appendChild(canvas);
  
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  
  const pieces = [];
  const numberOfPieces = 200;
  const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'];
  
  for (let i = 0; i < numberOfPieces; i++) {
    pieces.push({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height * -1,
      rotation: Math.random() * 360,
      size: Math.random() * (8 - 2) + 2,
      color: colors[Math.floor(Math.random() * colors.length)],
      velocity: {
        x: Math.random() * 6 - 3,
        y: Math.random() * 3 + 3
      }
    });
  }
  
  function update() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    pieces.forEach(piece => {
      piece.y += piece.velocity.y;
      piece.x += piece.velocity.x;
      piece.rotation += 2;
      
      if (piece.y > canvas.height) {
        piece.y = -piece.size;
        piece.x = Math.random() * canvas.width;
      }
      
      ctx.save();
      ctx.translate(piece.x, piece.y);
      ctx.rotate(piece.rotation * Math.PI / 180);
      ctx.fillStyle = piece.color;
      ctx.fillRect(-piece.size / 2, -piece.size / 2, piece.size, piece.size);
      ctx.restore();
    });
    
    requestAnimationFrame(update);
  }
  
  update();
  
  // Remover confeti después de 5 segundos
  setTimeout(() => {
    canvas.remove();
  }, 5000);
}

// Manejar envío del formulario al completar
window.finalizarTest = function() {
  // Recopilar todas las respuestas
  const datosTest = window.respuestas || {};
  console.log('Enviando datos del test:', datosTest);
  
  // Crear un formulario oculto para enviar los datos
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/recomendaciones';
  
  // Añadir los datos como campos ocultos
  for (const key in datosTest) {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = key;
    
    // Si es un objeto, convertir a JSON
    if (typeof datosTest[key] === 'object') {
      input.value = JSON.stringify(datosTest[key]);
    } else {
      input.value = datosTest[key] || '';
    }
    
    form.appendChild(input);
  }
  
  // Añadir el formulario al documento y enviarlo
  document.body.appendChild(form);
  form.submit();
};
