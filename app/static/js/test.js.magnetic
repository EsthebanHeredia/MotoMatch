// Funciones globales para el test de preferencias
// Implementa la integración con el componente MagneticBubbles

// Exponemos las funciones globalmente para que estén disponibles en test.html
window.initBubbles = initBubbles;
window.initializeTest = initializeTest;
window.reinitBubbles = reinitBubbles;
window.applyImpulseToBubbles = applyImpulseToBubbles;
window.updateWorldBoundaries = updateWorldBoundaries;
window.setupMouseInteraction = setupMouseInteraction;

// Instancias de MagneticBubbles para cada pregunta
let bubbleInstances = {};

/**
 * Inicializa las burbujas para un tipo específico (estilos o marcas)
 * @param {string} type - Tipo de burbujas ('estilos' o 'marcas')
 * @returns {MagneticBubbles} - La instancia creada
 */
function initBubbles(type) {
  console.log(`Inicializando burbujas de tipo ${type}`);
  
  // Si ya existe una instancia, la destruimos
  if (bubbleInstances[type]) {
    bubbleInstances[type].destroy();
  }
  
  const canvasId = `${type}-canvas`;
  const items = window[type] || [];
  
  // Verificar que el contenedor exista
  if (!document.getElementById(canvasId)) {
    console.error(`Contenedor ${canvasId} no encontrado`);
    return null;
  }
  
  console.log(`Inicializando burbujas de tipo ${type} con ${items.length} elementos`);
  
  // Crear nueva instancia
  bubbleInstances[type] = new MagneticBubbles(canvasId, items, {
    // Opciones personalizadas
    minRadius: 30,
    maxRadius: 45,
    textFont: '12px Arial, sans-serif',
    selectedColor: '#f97316',
    baseColor: '#333',
    textColor: '#fff'
  });
  
  // Escuchar eventos de selección
  document.getElementById(canvasId).addEventListener('selection-changed', function(e) {
    window.respuestas = window.respuestas || {};
    window.respuestas[type] = e.detail.selections;
    console.log(`Selecciones de ${type} actualizadas:`, window.respuestas[type]);
  });
  
  // Si hay selecciones previas, restaurarlas
  if (window.respuestas && window.respuestas[type] && Object.keys(window.respuestas[type]).length > 0) {
    bubbleInstances[type].setSelections(window.respuestas[type]);
  }
  
  return bubbleInstances[type];
}

/**
 * Reinicializa las burbujas de un tipo específico
 * @param {string} type - Tipo de burbujas ('estilos' o 'marcas')
 */
function reinitBubbles(type) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].destroy();
  }
  initBubbles(type);
}

/**
 * Aplica un impulso aleatorio a las burbujas para que se muevan
 * @param {string} type - Tipo de burbujas ('estilos' o 'marcas')
 */
function applyImpulseToBubbles(type) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].applyRandomImpulse();
  }
}

/**
 * Actualiza los límites del mundo para todas las instancias
 */
function updateWorldBoundaries() {
  for (const type in bubbleInstances) {
    if (bubbleInstances[type]) {
      bubbleInstances[type].updateBoundaries();
    }
  }
}

/**
 * Configura la interacción del mouse para un tipo de burbuja
 * @param {string} type - Tipo de burbujas ('estilos' o 'marcas')
 */
function setupMouseInteraction(type) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].setupMouseInteraction();
  }
}

/**
 * Inicializa el test completo
 */
function initializeTest() {
  console.log("Inicializando test de preferencias");
  
  // Asegurar que el objeto de respuestas existe
  window.respuestas = window.respuestas || {
    estilos: {},
    marcas: {},
    experiencia: "",
    uso: "",
    acompanantes: "",
    consumo: "",
    precio: "",
    potencia: "",
    torque: "",
    cilindrada: "",
    uso_experto: "",
    acompanantes_experto: "",
    precio_experto: ""
  };
  
  // Asegurar que solo la primera pregunta está visible
  document.querySelectorAll('.pregunta').forEach(element => {
    if (!element.classList.contains('active')) {
      element.style.display = 'none';
    } else {
      element.style.display = 'block';
    }
  });
  
  // Inicializar la primera pregunta con burbujas
  setTimeout(() => {
    initBubbles('estilos');
  }, 100);
  
  // Configurar listener para redimensionamiento
  window.addEventListener('resize', function() {
    updateWorldBoundaries();
  });
}

// Inicializar automáticamente cuando se carga el DOM
document.addEventListener('DOMContentLoaded', function() {
  console.log("DOM cargado, inicializando test");
  if (typeof initializeTest === 'function') {
    initializeTest();
  }
});
