// Datos estáticos para las burbujas
const estilos = [
  "Deportiva", "Naked", "Adventure", "Cruiser", "Touring", 
  "Scooter", "Custom", "Trail", "Enduro", "Clásica"
];

const marcas = [
  "Honda", "Yamaha", "Kawasaki", "Suzuki", "BMW", "KTM", 
  "Ducati", "Triumph", "Harley-Davidson", "Royal Enfield", 
  "Aprilia", "Vespa", "Moto Guzzi", "Indian", "Husqvarna"
];

// Variables globales para el componente MagneticBubbles
let bubbleInstances = {};
let activeCanvas = null;

// Objeto global para almacenar respuestas
window.respuestas = window.respuestas || {
  estilos: {},
  marcas: {},
  experiencia: "",
  uso: "",
  acompanantes: "",
  consumo: "",
  precio: "",
  potencia: "",
  torque: "",
  cilindrada: "",
  uso_experto: "",
  acompanantes_experto: "",
  precio_experto: ""
};

// Función para inicializar el test
document.addEventListener('DOMContentLoaded', function() {
  initializeTest();
  setupEventListeners();
});

// Inicializar el test
function initializeTest() {
  try {
    console.log("Inicializando test con MagneticBubbles");
    
    // Inicializar la primera pregunta con MagneticBubbles
    initBubbles('estilos');
    
    console.log("MagneticBubbles inicializado correctamente");
  } catch (error) {
    console.error("Error al inicializar MagneticBubbles:", error);
    alert("Ha ocurrido un error al inicializar el test. Por favor, recarga la página.");
  }
}

// Inicializar las burbujas para una pregunta específica
function initBubbles(type) {
  console.log(`Inicializando burbujas para tipo: ${type}`);
  
  // Obtener el canvas adecuado
  const canvasId = `${type}-canvas`;
  const canvasElement = document.getElementById(canvasId);
  if (!canvasElement) {
    console.error(`Canvas element ${canvasId} not found`);
    return;
  }
  
  activeCanvas = type;
  
  try {
    // Determinar los datos a usar
    let items = [];
    if (type === 'estilos') {
      items = window.estilos || estilos;
    } else if (type === 'marcas') {
      items = window.marcas || marcas;
    }
    
    console.log(`Usando ${items.length} elementos para ${type}`);
    
    // Crear instancia de MagneticBubbles
    bubbleInstances[type] = new MagneticBubbles(canvasId, items, {
      minRadius: 30,
      maxRadius: 45,
      attractionForce: 0,
      initialImpulse: 1.5,
      textFont: '12px Arial, sans-serif'
    });
    
    // Configurar evento para capturar selecciones
    canvasElement.addEventListener('selection-changed', (e) => {
      const selections = e.detail.selections;
      window.respuestas[type] = selections;
      console.log(`Selecciones de ${type} actualizadas:`, selections);
    });
    
    console.log(`Burbujas de ${type} inicializadas correctamente`);
    
  } catch (error) {
    console.error(`Error al inicializar las burbujas de ${type}:`, error);
  }
}

// Reinicializar burbujas para una pregunta
function reinitBubbles(type) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].destroy();
    initBubbles(type);
    console.log(`Burbujas de ${type} reinicializadas`);
  }
}

// Aplicar impulso a las burbujas
function applyImpulseToBubbles(type, strength = 1.0) {
  if (bubbleInstances[type]) {
    bubbleInstances[type].applyImpulse(strength);
  }
}

// Al cargar el documento
document.addEventListener('DOMContentLoaded', function() {
  console.log("DOM cargado, inicializando test con MagneticBubbles...");
  
  // Asegurarse de que solo la primera pregunta esté visible
  document.querySelectorAll('.pregunta').forEach(element => {
    if (element.id === 'pregunta-1') {
      element.style.display = 'block';
      element.classList.add('active');
    } else {
      element.style.display = 'none';
      element.classList.remove('active');
    }
  });
  
  // Actualizar barra de progreso inicial
  updateProgressBar();
  
  // Inicializar test con MagneticBubbles
  initializeTest();
  
  // Configurar eventos de la interfaz
  setupEventListeners();
});

// Inicializar Matter.js
function initializeMatter() {
  if (typeof Matter === 'undefined') {
    console.error("Matter.js no está disponible al inicializar");
    alert("Error al inicializar el test: Matter.js no está disponible. Por favor, recarga la página.");
    return;
  }
  
  console.log("Iniciando Matter.js");
  
  try {
    // Extraer los módulos de Matter.js
    const { Engine, Render, Runner, Bodies, Composite, Mouse, MouseConstraint, Events, Body } = Matter;
    
    // Crear el motor
    engine = Engine.create({
      enableSleeping: false
    });
    world = engine.world;
    
    // Configurar runner
    const runner = Runner.create();
    Runner.run(runner, engine);
    
    // Inicializar la primera pregunta
    initializeCirclesQuestion('estilos');
    
    console.log("Matter.js inicializado correctamente");
  } catch (error) {
    console.error("Error al inicializar Matter.js:", error);
    alert("Ha ocurrido un error al inicializar el test. Por favor, recarga la página.");
  }
}

// Inicializar pregunta de círculos
function initializeCirclesQuestion(type) {
  if (typeof Matter === 'undefined') {
    console.error("Matter.js no está disponible");
    return;
  }
  
  console.log(`Inicializando pregunta de círculos para tipo: ${type}`);
  
  // Limpiar canvas previo si existe
  if (render && render.canvas) {
    render.canvas.remove();
    Matter.Render.stop(render);
    Matter.Engine.clear(engine);
  }
  
  // Obtener el canvas adecuado
  const canvasElement = document.getElementById(`${type}-canvas`);
  if (!canvasElement) {
    console.error(`Canvas element ${type}-canvas not found`);
    return;
  }
  
  activeCanvas = type;
  
  try {
    const { Render, Bodies, Composite, Mouse, MouseConstraint, Events, Body } = Matter;
    
    // Crear el renderizador
    render = Render.create({
      element: canvasElement,
      engine: engine,
      options: {
        width: canvasElement.clientWidth,
        height: canvasElement.clientHeight,
        background: 'transparent',
        wireframes: false,
        showSleeping: false
      }
    });
    
    Render.run(render);
    
    // Limpiar el mundo antes de agregar nuevos cuerpos
    Composite.clear(world, false);
    
    // Determinar los datos a usar
    let itemsToUse = [];
    if (type === 'estilos') {
      itemsToUse = window.estilos || estilos;
    } else if (type === 'marcas') {
      itemsToUse = window.marcas || marcas;
    }
    
    console.log(`Usando ${itemsToUse.length} elementos para ${type}`);
    
    // Crear círculos para este tipo
    createBubbles(type, itemsToUse);
    
    // Paredes para contener los círculos
    updateWorldBoundaries();
    
    // Configurar interacción de mouse
    setupMouseInteraction(type);
    
    // Aplicar impulso inicial tras un retraso para permitir que el renderizado se estabilice
    setTimeout(() => randomImpulse(type), 300);
    
    // Hacer un impulso aleatorio cada 4 segundos para mantener el movimiento
    let intervalId = setInterval(() => randomImpulse(type), 4000);
    
    // Almacenar el ID del intervalo para limpiarlo después si es necesario
    window[`${type}Interval`] = intervalId;
    
    console.log(`Pregunta de ${type} inicializada correctamente`);
    
  } catch (error) {
    console.error(`Error al inicializar la pregunta de ${type}:`, error);
  }
}

// Reinicializar círculos (función global)
function reinitializeCircles() {
  if (activeCanvas) {
    console.log(`Reinicializando círculos para ${activeCanvas}`);
    
    // Limpiar cualquier intervalo existente para evitar duplicación de impulsos
    if (window[`${activeCanvas}Interval`]) {
      clearInterval(window[`${activeCanvas}Interval`]);
      window[`${activeCanvas}Interval`] = null;
    }
    
    // Eliminar todas las burbujas existentes antes de crear nuevas
    if (world && typeof Matter !== 'undefined') {
      const { Composite } = Matter;
      
      // Eliminar todos los cuerpos excepto las paredes estáticas
      const bodies = Composite.allBodies(world);
      bodies.forEach(body => {
        if (!body.isStatic) {
          Composite.remove(world, body);
        }
      });
      
      console.log(`Eliminadas ${bodies.length} burbujas existentes`);
    }
    
    // Reinicializar con un retraso para asegurar que la limpieza se completó
    setTimeout(() => {
      initializeCirclesQuestion(activeCanvas);
    }, 100);
  } else {
    console.error("No hay un canvas activo para reinicializar");
  }
}

// Actualizar límites del mundo según tamaño del canvas
function updateWorldBoundaries() {
  if (!render || !world || typeof Matter === 'undefined') return;
  
  const { Bodies, Composite } = Matter;
  
  // Remover paredes existentes
  const bodies = Matter.Composite.allBodies(world);
  bodies.forEach(body => {
    if (body.isStatic && !circles[activeCanvas]?.[body.id]) {
      Composite.remove(world, body);
    }
  });
  
  // Crear nuevas paredes con grosor adecuado para contener las burbujas
  const width = render.options.width;
  const height = render.options.height;
  const wallThickness = 50; // Grosor aumentado para evitar escapes
  
  const wallOptions = { 
    isStatic: true, 
    render: { fillStyle: 'transparent', strokeStyle: 'transparent' },
    restitution: 0.8 // Rebote más elástico
  };
  
  Composite.add(world, [
    // Pared superior - fuera del área visible
    Bodies.rectangle(width / 2, -wallThickness/2, width + wallThickness*2, wallThickness, wallOptions),
    
    // Pared inferior - fuera del área visible
    Bodies.rectangle(width / 2, height + wallThickness/2, width + wallThickness*2, wallThickness, wallOptions),
    
    // Pared izquierda - fuera del área visible
    Bodies.rectangle(-wallThickness/2, height / 2, wallThickness, height + wallThickness*2, wallOptions),
    
    // Pared derecha - fuera del área visible
    Bodies.rectangle(width + wallThickness/2, height / 2, wallThickness, height + wallThickness*2, wallOptions)
  ]);
  
  console.log(`Paredes creadas para contener: ${width}x${height}`);
}

// Configurar interacción del mouse
function setupMouseInteraction(type) {
  if (!render || !engine || typeof Matter === 'undefined') return;
  
  const { Mouse, MouseConstraint, Events, Composite, Query } = Matter;
  
  // Configurar mouse
  const mouse = Mouse.create(render.canvas);
  const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: {
      stiffness: 0.2,
      render: { visible: false }
    }
  });
  
  Composite.add(world, mouseConstraint);
  
  // Sobrescribir el comportamiento predeterminado de escala
  render.mouse = mouse;
  
  // Evento de clic para seleccionar burbujas
  Events.on(mouseConstraint, 'mousedown', function(event) {
    const clickPosition = event.mouse.position;
    const clickedBody = Query.point(Composite.allBodies(world), clickPosition)[0];
    
    if (clickedBody && circles[type] && circles[type][clickedBody.id]) {
      const bubbleInfo = circles[type][clickedBody.id];
      toggleBubbleSelection(clickedBody, bubbleInfo.name, type);
    } else {
      // Aplicar impulso aleatorio a todas las burbujas para moverlas
      randomImpulse(type);
    }
  });
}

// Crear burbujas
function createBubbles(type, items) {
  if (!world || typeof Matter === 'undefined') {
    console.error("Matter.js no está disponible al crear burbujas");
    return;
  }
  
  const { Bodies, Body, Composite } = Matter;
  circles[type] = {};
  
  const width = render ? render.options.width : 600;
  const height = render ? render.options.height : 400;
  
  console.log(`Creando burbujas de tipo ${type} (${items.length} items) en canvas ${width}x${height}`);
  
  // Crear una rejilla para posicionamiento
  const gridSize = Math.ceil(Math.sqrt(items.length));
  const cellWidth = width / gridSize;
  const cellHeight = height / gridSize;
  
  items.forEach((item, index) => {
    // Posición basada en grid para mejor distribución inicial
    const row = Math.floor(index / gridSize);
    const col = index % gridSize;
    
    // Posición central en su celda con algo de variación aleatoria
    const x = cellWidth * (col + 0.5) + (Math.random() * 0.4 - 0.2) * cellWidth;
    const y = cellHeight * (row + 0.5) + (Math.random() * 0.4 - 0.2) * cellHeight;
    
    // Radio aleatorio pero acotado
    const radius = Math.random() * (bubbleMaxRadius - bubbleMinRadius) + bubbleMinRadius;
    
    // Color aleatorio del arreglo de colores
    const color = bubbleColors[index % bubbleColors.length];
    
    // Crear cuerpo circular
    const bubble = Bodies.circle(x, y, radius, {
      friction: 0.1,
      frictionAir: 0.03,
      restitution: 0.8,
      density: 0.001, // Menos densidad para mejor movimiento
      render: {
        fillStyle: color,
        strokeStyle: '#000',
        lineWidth: 1
      }
    });
    
    // Guardar información de la burbuja
    circles[type][bubble.id] = {
      body: bubble,
      name: item,
      color: color,
      selected: 0 // 0 = no seleccionado, 1-4 = nivel de selección
    };
    
    // Agregar al mundo
    Composite.add(world, bubble);
  });
  
  // Dibujar texto en las burbujas después de que estén en el mundo
  if (render) {
    Events.on(render, 'afterRender', function() {
      const ctx = render.context;
      
      if (!circles[type]) return;
      
      Object.values(circles[type]).forEach(info => {
        const { body, name, selected } = info;
        
        // Dibujar texto centrado en la burbuja
        ctx.font = '10px Arial';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        const x = body.position.x;
        const y = body.position.y;
        
        // Crear sombra para mejor legibilidad
        ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
        ctx.shadowBlur = 4;
        ctx.shadowOffsetX = 1;
        ctx.shadowOffsetY = 1;
        
        ctx.fillText(name, x, y);
        
        // Quitar sombra para no afectar otros dibujos
        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      });
    });
  }
}

// Alternar selección de burbuja
function toggleBubbleSelection(body, name, type) {
  if (!circles[type] || !circles[type][body.id]) return;
  
  const bubbleInfo = circles[type][body.id];
  
  // Incrementar nivel de selección (ciclo de 0-4)
  bubbleInfo.selected = (bubbleInfo.selected + 1) % 5;
  
  // Actualizar visualización según nivel
  updateBubbleVisual(body, bubbleInfo);
  
  // Guardar selección en respuestas
  if (bubbleInfo.selected > 0) {
    window.respuestas[type][name] = bubbleInfo.selected;
  } else {
    delete window.respuestas[type][name];
  }
  
  console.log(`${name} selección: ${bubbleInfo.selected}`);
  console.log('Respuestas actuales:', window.respuestas);
}

// Actualizar visual de la burbuja según nivel de selección
function updateBubbleVisual(body, bubbleInfo) {
  if (typeof Matter === 'undefined') return;
  
  const { Body } = Matter;
  const level = bubbleInfo.selected;
  
  // Color base de la burbuja
  let color = bubbleInfo.color;
  let strokeColor = '#000000';
  let lineWidth = 1;
  let scale = 1.0;
  
  // Modificar apariencia según nivel de selección
  if (level > 0) {
    strokeColor = '#FFC107'; // Borde amarillo para selección
    lineWidth = 2;
    
    // Aumentar escala según nivel
    scale = 1.0 + (level * 0.1);
    
    // Ajustar brillo del color según nivel
    const brightenFactor = level * 0.15;
    color = increaseBrightness(bubbleInfo.color, brightenFactor);
  }
  
  // Aplicar cambios visuales
  body.render.fillStyle = color;
  body.render.strokeStyle = strokeColor;
  body.render.lineWidth = lineWidth;
  
  // Ajustar escala
  const currentScale = body.circleRadius / bubbleInfo.body.circleRadius;
  if (currentScale !== scale) {
    Body.scale(body, scale / currentScale, scale / currentScale);
  }
  
  // Aplicar un pequeño impulso para hacer notar el cambio
  Body.setVelocity(body, {
    x: (Math.random() - 0.5) * 2,
    y: (Math.random() - 0.5) * 2
  });
}

// Aumentar brillo de un color hex
function increaseBrightness(hex, factor) {
  // Convertir hex a RGB
  let r = parseInt(hex.substring(1, 3), 16);
  let g = parseInt(hex.substring(3, 5), 16);
  let b = parseInt(hex.substring(5, 7), 16);
  
  // Aumentar valores RGB
  r = Math.min(255, Math.round(r * (1 + factor)));
  g = Math.min(255, Math.round(g * (1 + factor)));
  b = Math.min(255, Math.round(b * (1 + factor)));
  
  // Convertir de vuelta a hex
  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
}

// Aplicar impulso aleatorio a todas las burbujas
function randomImpulse(type) {
  if (typeof Matter === 'undefined') return;
  
  if (!type) type = activeCanvas;
  if (!type || !circles[type]) {
    console.warn(`No se pueden aplicar impulsos, falta tipo o círculos para ${type}`);
    return;
  }
  
  const { Body } = Matter;
  const bubbles = Object.values(circles[type]);
  
  if (bubbles.length === 0) {
    console.warn(`No hay burbujas para aplicar impulso en ${type}`);
    return;
  }
  
  console.log(`Aplicando impulso aleatorio a ${bubbles.length} burbujas de ${type}`);
  
  // Obtener dimensiones del contenedor
  const width = render ? render.options.width : 600;
  const height = render ? render.options.height : 400;
  
  // Calcular centro del contenedor
  const centerX = width / 2;
  const centerY = height / 2;
  
  bubbles.forEach(info => {
    // Obtener posición actual
    const { x, y } = info.body.position;
    
    // Calcular vector desde el centro
    const fromCenterX = x - centerX;
    const fromCenterY = y - centerY;
    
    // Calcular distancia al centro
    const distanceToCenter = Math.sqrt(fromCenterX * fromCenterX + fromCenterY * fromCenterY);
    
    // Factor de impulso: más fuerte cerca de los bordes, más suave en el centro
    const edgeFactor = Math.min(1, distanceToCenter / (Math.min(width, height) / 2));
    
    // Velocidad base aleatoria
    let velX = (Math.random() - 0.5) * 4;
    let velY = (Math.random() - 0.5) * 4;
    
    // Si está cerca del borde, aplicar impulso hacia el centro
    if (edgeFactor > 0.8) {
      // Normalizar el vector desde el centro
      const normalizeX = -fromCenterX / distanceToCenter;
      const normalizeY = -fromCenterY / distanceToCenter;
      
      // Combinar el vector aleatorio con el vector hacia el centro
      velX = velX * 0.3 + normalizeX * 3;
      velY = velY * 0.3 + normalizeY * 3;
    }
    
    // Aplicar velocidad con un factor aleatorio para evitar movimientos sincronizados
    Body.setVelocity(info.body, {
      x: velX * (Math.random() * 0.5 + 0.75),
      y: velY * (Math.random() * 0.5 + 0.75)
    });
  });
}

// Configurar eventos en la interfaz
function setupEventListeners() {
  // Configurar botones de navegación
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', navigatePrev);
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', navigateNext);
  }
  
  // Botón para reiniciar las burbujas
  const resetBtn = document.getElementById('reset-bubbles');
  if (resetBtn) {
    resetBtn.addEventListener('click', function() {
      if (activeCanvas && bubbleInstances[activeCanvas]) {
        bubbleInstances[activeCanvas].resetSelections();
        bubbleInstances[activeCanvas].applyImpulse(1.0);
      }
    });
  }
  
  // Evento en cambio de ventana para redimensionar
  window.addEventListener('resize', () => {
    if (activeCanvas && bubbleInstances[activeCanvas]) {
      // El componente MagneticBubbles maneja esto internamente
      console.log('Ventana redimensionada, el componente se ajustará automáticamente');
    }
  });
}

// Navegación a pregunta anterior
function navigatePrev() {
  const currentQuestion = document.querySelector('.pregunta.active');
  if (!currentQuestion) return;
  
  // Obtener el número de pregunta actual
  const currentId = currentQuestion.id;
  const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
  
  if (!match) return;
  
  let questionNum = parseInt(match[1]);
  const questionType = match[2]; // 'inexperto' o 'experto' o undefined
  
  // Guardar respuesta actual si hay select
  saveCurrentResponse(currentQuestion);
  
  // Ocultar pregunta actual
  currentQuestion.classList.remove('active');
  currentQuestion.style.display = 'none';
  
  let prevQuestionId;
  
  // Lógica para encontrar la pregunta anterior
  if (questionType) {
    // Estamos en una rama específica
    if (questionNum > 4) {
      // Ir a la pregunta anterior en la misma rama
      prevQuestionId = `pregunta-${questionNum-1}-${questionType}`;
    } else {
      // Volver a la pregunta 3 (experiencia)
      prevQuestionId = 'pregunta-3';
    }
  } else {
    // Preguntas iniciales 1-3
    if (questionNum > 1) {
      prevQuestionId = `pregunta-${questionNum-1}`;
      
      // Si volvemos a la pregunta 1, inicializar burbujas de estilos
      if (questionNum - 1 === 1) {
        setTimeout(() => {
          initBubbles('estilos');
        }, 100);
      }
    }
  }
  
  // Mostrar pregunta anterior
  if (prevQuestionId) {
    const prevQuestion = document.getElementById(prevQuestionId);
    if (prevQuestion) {
      prevQuestion.classList.add('active');
      prevQuestion.style.display = 'block';
      
      // Si la pregunta anterior es la 2, inicializar burbujas de marcas
      if (prevQuestionId === 'pregunta-2') {
        setTimeout(() => {
          initBubbles('marcas');
        }, 100);
      }
    }
  }
  
  // Actualizar estado del botón anterior
  document.getElementById('prev-btn').disabled = (prevQuestionId === 'pregunta-1');
  
  // Actualizar barra de progreso
  updateProgressBar(questionNum - 1);
}
  
  // Actualizar barra de progreso
  updateProgressBar();
}

// Navegación a siguiente pregunta
function navigateNext() {
  const currentQuestion = document.querySelector('.pregunta.active');
  if (!currentQuestion) return;
  
  // Obtener el número de pregunta actual
  const currentId = currentQuestion.id;
  const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
  
  if (!match) return;
  
  let questionNum = parseInt(match[1]);
  const questionType = match[2]; // 'inexperto' o 'experto' o undefined
  
  // Guardar respuesta actual
  saveCurrentResponse(currentQuestion);
  
  // Ocultar pregunta actual
  currentQuestion.classList.remove('active');
  currentQuestion.style.display = 'none';
  
  let nextQuestionId;
  
  // Encontrar la siguiente pregunta según el flujo
  if (questionNum === 3) {
    // Ramificación según nivel de experiencia
    const experienciaSelect = document.getElementById('experiencia');
    const path = experienciaSelect.value === 'experto' ? 'experto' : 'inexperto';
    nextQuestionId = `pregunta-4-${path}`;
  } else if (questionType) {
    // Seguimos en una rama específica
    const maxQuestion = questionType === 'experto' ? 9 : 7;
    
    if (questionNum < maxQuestion) {
      nextQuestionId = `pregunta-${questionNum+1}-${questionType}`;
    } else {
      // Final del test
      showCompletionModal();
      return;
    }
  } else {
    // Preguntas iniciales 1-3
    if (questionNum < 3) {
      nextQuestionId = `pregunta-${questionNum+1}`;
      
      // Si pasamos a la pregunta 2, inicializar burbujas de marcas
      if (questionNum + 1 === 2) {
        setTimeout(() => {
          initBubbles('marcas');
        }, 100);
      }
    }
  }
  
  // Mostrar siguiente pregunta
  if (nextQuestionId) {
    const nextQuestion = document.getElementById(nextQuestionId);
    if (nextQuestion) {
      nextQuestion.classList.add('active');
      nextQuestion.style.display = 'block';
    }
  }
  
  // Habilitar botón anterior
  document.getElementById('prev-btn').disabled = false;
  
  // Actualizar barra de progreso
  updateProgressBar();
}

// Guardar respuesta actual
function saveCurrentResponse(question) {
  // Guardar selección actual del select si existe
  const select = question.querySelector('select');
  if (select && select.id) {
    window.respuestas[select.id] = select.value;
    console.log(`Guardando respuesta: ${select.id} = ${select.value}`);
  }
}

// Actualizar barra de progreso
function updateProgressBar(questionNum) {
  const progressBar = document.getElementById('progress-bar');
  if (!progressBar) return;
  
  if (!questionNum) {
    const currentQuestion = document.querySelector('.pregunta.active');
    if (!currentQuestion) return;
    
    const currentId = currentQuestion.id;
    const match = currentId.match(/pregunta-(\d+)(?:-(\w+))?/);
    
    if (!match) return;
    
    questionNum = parseInt(match[1]);
  }
  
  const questionType = document.querySelector('.pregunta.active')?.id.match(/pregunta-\d+(?:-(\w+))?/)?.[1];
  
  let totalQuestions, progress;
  
  if (questionType === 'experto') {
    totalQuestions = 9;
    // Ajustar para preguntas 1-3 comunes + 4-9 experto
    progress = questionNum <= 3 ? questionNum : 3 + (questionNum - 3);
  } else if (questionType === 'inexperto') {
    totalQuestions = 7;
    // Ajustar para preguntas 1-3 comunes + 4-7 inexperto
    progress = questionNum <= 3 ? questionNum : 3 + (questionNum - 3);
  } else {
    // Preguntas comunes 1-3
    totalQuestions = 9; // Usamos el más largo como referencia
    progress = questionNum;
  }
  
  const percentage = (progress / totalQuestions) * 100;
  progressBar.style.width = `${percentage}%`;
}

// Mostrar modal de finalización
function showCompletionModal() {
  const modal = document.getElementById('completion-modal');
  if (modal) {
    modal.style.display = 'flex';
    
    // Confetti effect
    launchConfetti();
  }
}

// Efecto de confeti
function launchConfetti() {
  const canvas = document.createElement('canvas');
  canvas.style.position = 'fixed';
  canvas.style.top = '0';
  canvas.style.left = '0';
  canvas.style.width = '100%';
  canvas.style.height = '100%';
  canvas.style.pointerEvents = 'none';
  canvas.style.zIndex = '9999';
  document.body.appendChild(canvas);
  
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  
  const pieces = [];
  const numberOfPieces = 200;
  const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'];
  
  for (let i = 0; i < numberOfPieces; i++) {
    pieces.push({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height * -1,
      rotation: Math.random() * 360,
      size: Math.random() * (8 - 2) + 2,
      color: colors[Math.floor(Math.random() * colors.length)],
      velocity: {
        x: Math.random() * 6 - 3,
        y: Math.random() * 3 + 3
      }
    });
  }
  
  function update() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    pieces.forEach(piece => {
      piece.y += piece.velocity.y;
      piece.x += piece.velocity.x;
      piece.rotation += 2;
      
      if (piece.y > canvas.height) {
        piece.y = -piece.size;
        piece.x = Math.random() * canvas.width;
      }
      
      ctx.save();
      ctx.translate(piece.x, piece.y);
      ctx.rotate(piece.rotation * Math.PI / 180);
      ctx.fillStyle = piece.color;
      ctx.fillRect(-piece.size / 2, -piece.size / 2, piece.size, piece.size);
      ctx.restore();
    });
    
    requestAnimationFrame(update);
  }
  
  update();
  
  // Remover confeti después de 5 segundos
  setTimeout(() => {
    canvas.remove();
  }, 5000);
}

// Manejar envío del formulario al completar
window.finalizarTest = function() {
  // Recopilar todas las respuestas
  const datosTest = window.respuestas || {};
  console.log('Enviando datos del test:', datosTest);
  
  // Crear un formulario oculto para enviar los datos
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/recomendaciones';
  
  // Añadir los datos como campos ocultos
  for (const key in datosTest) {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = key;
    
    // Si es un objeto, convertir a JSON
    if (typeof datosTest[key] === 'object') {
      input.value = JSON.stringify(datosTest[key]);
    } else {
      input.value = datosTest[key] || '';
    }
    
    form.appendChild(input);
  }
  
  // Añadir el formulario al documento y enviarlo
  document.body.appendChild(form);
  form.submit();
};

// Iniciar automaticamente si el documento ya está cargado
if (document.readyState === 'complete' || document.readyState === 'interactive') {
  setTimeout(initializeMatter, 500);
}
