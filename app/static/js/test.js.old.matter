// Datos
const estilos = ["cross", "custom", "eléctrica", "enduro", "infantil", "naked", "quad-atv", "scooter", "sport", "supermotard", "trail", "trial", "turismo"];
const marcas = ["AJP", "Adiva", "Aeon", "Alpina", "Aprilia", "Artemisa", "Astra", "Bajaj", "Benda", "Beta", "BH", "Bimoto", "BMW", "Brixton", "Bullit", "CFMoto", "Cleveland CycleWerks", "Ducati", "Energica", "GasGas", "Gilera", "Honda", "Husqvarna", "Indian", "Jawa", "Kawasaki", "KTM", "Kymco", "Lambretta", "Lifan", "Macbor", "Mash", "MCI", "Moto Morini", "Moto Guzzi", "Motron", "MV Agusta", "Neoway", "Norton", "Peugeot", "Piaggio", "Polaris", "Qooder", "Rieju", "Royal Enfield", "Sherco", "Suzuki", "SYM", "Tesla", "Triumph", "UM Motorcycles", "Urbet", "Vectrix", "Vespa", "Victory", "Voge", "Volta", "Vässla", "Wottan", "Xero", "Yadea", "Yamaha", "Zero Motorcycles", "Zitmuv", "Zontes"];

// Configuración del sistema de preguntas
let currentPregunta = 1;
// Variable que se ajustará según el camino del cuestionario (inexperto: 7, experto: 9)
let totalPreguntas = 9;
const respuestas = {
  estilos: {},
  marcas: {},
  uso: "",
  experiencia: "",
  cilindrada: "",
  año: "",
  potencia: "",
  torque: "",
  peso: "",
  presupuesto: ""
};

// Asegurarse de que Matter.js está disponible
if (typeof Matter === 'undefined') {
  console.error('Matter.js no está cargado correctamente');
}

// Inicializar motores físicos Matter.js - SOLO UNA VEZ
const Engine = Matter.Engine;
const Render = Matter.Render;
const World = Matter.World;
const Bodies = Matter.Bodies;
const Body = Matter.Body;
const Events = Matter.Events;
const Mouse = Matter.Mouse;
const MouseConstraint = Matter.MouseConstraint;

// Configurar física - UN SOLO MOTOR para todo
const engine = Engine.create({
  gravity: { x: 0, y: 0 }, // Sin gravedad para que floten
  enableSleeping: false // Mantener activos los cuerpos siempre
});
const world = engine.world;

// Objetos para rastrear círculos
const circulos = {
  estilos: [],
  marcas: []
};

// Configuración inicial de los renders
const renders = {};
let canvasDivs = {};

// Configuración de tamaño según el nivel de selección
const tamañoPorNivel = {
  0: 1.0, // Tamaño normal (no seleccionado)
  1: 1.3, // Nivel 1 (me gusta)
  2: 1.4, // Me gusta
  3: 1.6, // me gusta mucho
  4: 1.8  // me encanta
};

// Colores base
const colorPrincipal = '#f97316'; // Naranja principal

// Función para inicializar los canvasDivs
function inicializarCanvasDivs() {
  canvasDivs = {
    estilos: document.getElementById('estilos-canvas'),
    marcas: document.getElementById('marcas-canvas')
  };
  
  // Verificar que existen los elementos
  if (!canvasDivs.estilos) {
    console.error('El elemento con ID "estilos-canvas" no existe');
    return false;
  }
  
  if (!canvasDivs.marcas) {
    console.error('El elemento con ID "marcas-canvas" no existe');
    return false;
  }
  
  console.log('Canvas divs inicializados correctamente:');
  console.log('estilos-canvas:', canvasDivs.estilos);
  console.log('marcas-canvas:', canvasDivs.marcas);
  
  return true;
}

// Inicializar renders para cada canvas
function inicializarRenders() {
  if (!inicializarCanvasDivs()) return;
  
  Object.keys(canvasDivs).forEach(key => {
    const canvasDiv = canvasDivs[key];
    
    // Verificar si ya existe un render para este canvas
    if (renders[key] && renders[key].canvas) {
      // Limpiar el render existente
      Render.stop(renders[key]);
      canvasDiv.innerHTML = '';
    }
    
    // Obtener dimensiones del canvas
    const width = canvasDiv.clientWidth || canvasDiv.offsetWidth || 800;
    const height = canvasDiv.clientHeight || canvasDiv.offsetHeight || 400;
    
    console.log(`Dimensiones del div ${key}: ${width}x${height}`);
    
    // Crear render
    renders[key] = Render.create({
      element: canvasDiv,
      engine: engine,
      options: {
        width: width,
        height: height,
        wireframes: false,
        background: 'transparent',
        pixelRatio: window.devicePixelRatio || 1
      }
    });
    
    console.log(`Render creado para ${key} con dimensiones: ${renders[key].options.width}x${renders[key].options.height}`);
    
    // Inicialmente detenemos los renders, se activarán cuando sea necesario
    Render.run(renders[key]);
    
    // Asegurarse de que el canvas tenga el estilo correcto para recibir eventos
    if (renders[key].canvas) {
      renders[key].canvas.style.width = '100%';
      renders[key].canvas.style.height = '100%';
    }
  });
}

// Función para crear círculos aleatorios
function crearCirculos(tipo, lista) {
  console.log(`Iniciando creación de círculos para ${tipo}`);
  
  // Verificación para asegurarse que la lista está completa
  if (!lista || lista.length === 0) {
    console.error(`Lista de ${tipo} vacía`);
    if (tipo === 'marcas') {
      lista = marcas;
    } else if (tipo === 'estilos') {
      lista = estilos;
    }
  }
  
  if (!canvasDivs[tipo]) {
    console.error(`Canvas para ${tipo} no encontrado`);
    return;
  }

  const canvas = canvasDivs[tipo];
  const width = canvas.offsetWidth || 800;
  const height = canvas.offsetHeight || 400;
  
  console.log(`Canvas dimensiones: ${width}x${height}`);

  // Limpiar TODOS los cuerpos del mundo antes de crear nuevos
  World.clear(world, false);
  
  // Reiniciar la lista de círculos para este tipo
  circulos[tipo] = [];

  // Determinar radio basado en el número de elementos
  const minRadius = 25;
  const maxRadius = 35;

  // Filtrar nombres válidos antes de procesar
  const nombresValidos = lista.filter(nombre => nombre && nombre.trim() !== '');
  
  // Crear círculos para los elementos
  nombresValidos.forEach((nombre, index) => {
    // Calcular radio
    const radius = Math.floor(Math.random() * (maxRadius - minRadius) + minRadius);

    // Posición inicial dentro del canvas
    const x = Math.random() * (width - radius * 2) + radius;
    const y = Math.random() * (height - radius * 2) + radius;

    // Velocidad inicial aleatoria
    const vx = (Math.random() - 0.5) * 2;
    const vy = (Math.random() - 0.5) * 2;

    // Generar un color para el círculo
    const hue = (index * 30) % 360; 
    const color = `hsl(${hue}, 60%, 30%)`;
    const strokeColor = `hsl(${hue}, 80%, 50%)`;

    // Crear el cuerpo físico
    const circulo = Bodies.circle(x, y, radius, {
      restitution: 0.8,
      friction: 0.005,
      frictionAir: 0.01,
      render: {
        fillStyle: color,
        strokeStyle: strokeColor,
        lineWidth: 2
      }
    });

    // Establecer velocidad inicial
    Body.setVelocity(circulo, { x: vx, y: vy });

    // Almacenar información adicional con el círculo
    const circuloInfo = {
      body: circulo,
      nombre: nombre,
      nivel: 0,
      radio: radius,
      radioOriginal: radius
    };

    circulo.label = 'circle';
    circulo.circuloInfo = circuloInfo;

    // Añadir a la lista
    circulos[tipo].push(circuloInfo);

    // Añadir al mundo
    World.add(world, circulo);
  });

  console.log(`Creados ${circulos[tipo].length} círculos para ${nombresValidos.length} elementos válidos en la lista de ${tipo}`);

  // Actualizar los límites del mundo físico
  updateWorldBoundaries();
}

// Función para dibujar texto en círculos
function dibujarTextoEnCirculos() {
  // Limpiar eventos existentes para evitar duplicaciones
  Object.keys(renders).forEach(tipo => {
    if (renders[tipo]) {
      Events.off(renders[tipo], 'afterRender');
    }
  });
  
  // Para cada tipo de círculo (estilos, marcas)
  Object.keys(circulos).forEach(tipo => {
    if (renders[tipo] && renders[tipo].canvas) {
      const render = renders[tipo];
      const ctx = render.context;
      
      // Evento para dibujar texto después de cada renderizado
      Events.on(render, 'afterRender', function() {
        if (circulos[tipo] && circulos[tipo].length > 0) {
          circulos[tipo].forEach(circuloInfo => {
            if (circuloInfo && circuloInfo.body) {
              const body = circuloInfo.body;
              const pos = body.position;
              
              // Configurar estilo de texto
              ctx.font = 'bold 12px Arial';
              ctx.fillStyle = 'white';
              ctx.textAlign = 'center';
              ctx.textBaseline = 'middle';
              
              // Dibujar un fondo oscuro para mejorar la legibilidad
              const textWidth = ctx.measureText(circuloInfo.nombre).width;
              ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
              ctx.fillRect(pos.x - textWidth/2 - 2, pos.y - 8, textWidth + 4, 16);
              
              // Dibujar nombre dentro del círculo
              ctx.fillStyle = 'white';
              ctx.fillText(circuloInfo.nombre, pos.x, pos.y);
              
              // Agregar un contorno para mayor visibilidad
              ctx.strokeStyle = '#f97316';
              ctx.lineWidth = 0.5;
              ctx.strokeText(circuloInfo.nombre, pos.x, pos.y);
            }
          });
        }
      });
    }
  });
}

// Variables para evitar múltiples instancias de mouseConstraint
const mouseConstraints = {};

// Configurar los eventos de mouse para cada render
function setupMouseInteraction(tipo) {
  console.log(`Configurando interacción del mouse para ${tipo}`);
  if (!renders[tipo] || !renders[tipo].canvas) {
    console.error(`Render para ${tipo} no inicializado correctamente`);
    return;
  }
  
  const canvas = renders[tipo].canvas;
  console.log(`Canvas encontrado para ${tipo}: ${canvas.width}x${canvas.height}`);
  
  // Eliminar mouse constraint anterior si existe
  if (mouseConstraints[tipo]) {
    World.remove(world, mouseConstraints[tipo]);
    delete mouseConstraints[tipo];
  }
  
  // Crear un nuevo mouse usando el canvas específico
  const mouse = Mouse.create(canvas);
  
  // Ajustar el escalado del mouse para que coincida con el canvas
  mouse.pixelRatio = window.devicePixelRatio || 1;
  
  const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: {
      stiffness: 0.2,
      render: {
        visible: true // Hacer visible la restricción del mouse
      }
    }
  });
  
  mouseConstraints[tipo] = mouseConstraint;
  World.add(world, mouseConstraint);
  
  console.log(`Mouse constraint creado para ${tipo}`);
  
  // Al hacer clic en un círculo
  Events.on(mouseConstraint, 'mousedown', (event) => {
    const mousePosition = event.mouse.position;
    const circulosActivos = circulos[tipo];
    
    console.log(`Click detectado en ${tipo}, posición: (${mousePosition.x}, ${mousePosition.y})`);
    
    circulosActivos.forEach(circuloInfo => {
      const body = circuloInfo.body;
      const dx = body.position.x - mousePosition.x;
      const dy = body.position.y - mousePosition.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < circuloInfo.radio) {
        console.log(`Click en círculo: ${circuloInfo.nombre}`);
        // Cambiar nivel de selección (0-4 y luego vuelve a 0)
        circuloInfo.nivel = (circuloInfo.nivel + 1) % 5;
        
        // Cambiar color según nivel
        const colors = ['#333333', '#444444', '#555555', '#666666', '#777777'];
        body.render.fillStyle = colors[circuloInfo.nivel];
        
        // Determinar el factor de escala para el círculo
        const escalaActual = body.circleRadius / circuloInfo.radioOriginal;
        let nuevaEscala = tamañoPorNivel[circuloInfo.nivel] / escalaActual;
        
        // Calcular nuevo radio basado en el nivel
        const nuevoRadio = circuloInfo.radioOriginal * tamañoPorNivel[circuloInfo.nivel];
        circuloInfo.radio = nuevoRadio;
        
        // Escalar el cuerpo físico correctamente
        Body.scale(body, nuevaEscala, nuevaEscala);
        
        // Actualizar respuestas 
        if (circuloInfo.nivel > 0) {
          respuestas[tipo][circuloInfo.nombre] = circuloInfo.nivel; // Guardamos el nivel de preferencia
        } else {
          delete respuestas[tipo][circuloInfo.nombre]; // Si el nivel es 0, eliminamos la preferencia
        }
        
        // Aplicar una fuerza para que el círculo se mueva al cambiar
        Body.applyForce(body, body.position, {
          x: (Math.random() - 0.5) * 0.1,
          y: (Math.random() - 0.5) * 0.1
        });
      }
    });
  });
  
  // Asegurarse de que el mouse se actualice con el movimiento
  Events.on(mouseConstraint, 'mousemove', () => {
    // Esto asegura que el mouse constraint esté activo
  });
  
  // Desactivar el evento right click del navegador
  canvas.addEventListener('contextmenu', function(e) {
    e.preventDefault();
  });
  
  // Hacer que los círculos también se muevan al hacer clic en el fondo
  canvas.addEventListener('click', function(e) {
    // Aplicar fuerzas aleatorias a todos los círculos
    circulos[tipo].forEach(circuloInfo => {
      Body.applyForce(circuloInfo.body, circuloInfo.body.position, {
        x: (Math.random() - 0.5) * 0.05,
        y: (Math.random() - 0.5) * 0.05
      });
    });
  });
  
  // Actualizar el mouse del render
  renders[tipo].mouse = mouse;
}

// Función para actualizar límites del mundo
function updateWorldBoundaries() {
  // Eliminar paredes anteriores si existen
  const walls = world.bodies.filter(body => body.label === 'wall');
  walls.forEach(wall => World.remove(world, wall));
  
  // Crear nuevas paredes según la pregunta actual
  const tipo = currentPregunta === 1 ? 'estilos' : currentPregunta === 2 ? 'marcas' : null;
  
  if (tipo && canvasDivs[tipo]) {
    const canvasDiv = canvasDivs[tipo];
    const width = canvasDiv.offsetWidth;
    const height = canvasDiv.offsetHeight;
    
    // Crear las cuatro paredes
    const wallThickness = 50;
    const walls = [
      // Pared superior
      Bodies.rectangle(width / 2, -wallThickness / 2, width, wallThickness, {
        isStatic: true,
        render: { fillStyle: 'transparent' },
        label: 'wall'
      }),
      // Pared inferior
      Bodies.rectangle(width / 2, height + wallThickness / 2, width, wallThickness, {
        isStatic: true,
        render: { fillStyle: 'transparent' },
        label: 'wall'
      }),
      // Pared izquierda
      Bodies.rectangle(-wallThickness / 2, height / 2, wallThickness, height, {
        isStatic: true,
        render: { fillStyle: 'transparent' },
        label: 'wall'
      }),
      // Pared derecha
      Bodies.rectangle(width + wallThickness / 2, height / 2, wallThickness, height, {
        isStatic: true,
        render: { fillStyle: 'transparent' },
        label: 'wall'
      })
    ];
    
    walls.forEach(wall => {
      World.add(world, wall);
    });
  }
}

// Función principal de inicialización
function init() {
  try {
    console.log('Iniciando sistema...');
    
    // Verificamos que Matter.js esté disponible
    if (typeof Matter === 'undefined') {
      console.error('Error: Matter.js no está cargado');
      alert('Error al cargar la librería de física. Por favor, recarga la página.');
      return;
    }
    
    // Hacer disponibles las variables globalmente para que el script en test.html pueda accederlas
    window.estilos = estilos;
    window.marcas = marcas;
    window.crearCirculos = crearCirculos;
    window.setupMouseInteraction = setupMouseInteraction;
    window.updateWorldBoundaries = updateWorldBoundaries;
    window.circulos = circulos;
    window.renders = renders;
    
    // Reiniciar el mundo para asegurar que esté limpio
    World.clear(world, false);
    
    // Inicializar renders
    inicializarRenders();
    
    // Añadir función para dibujar texto en círculos
    dibujarTextoEnCirculos();
    
    // Actualizar paredes del mundo físico
    updateWorldBoundaries();
    
    // Inicializar círculos para la primera pregunta
    crearCirculos('estilos', estilos);
    
    // Configurar interacciones para la primera pregunta
    setupMouseInteraction('estilos');
    
    // Iniciar el render para la primera pregunta
    const primeraPregunta = document.getElementById('pregunta-1');
    if (primeraPregunta && primeraPregunta.dataset.type === 'circles') {
      const tipo = primeraPregunta.dataset.key;
      if (renders[tipo]) {
        Render.run(renders[tipo]);
        console.log(`Render activado para ${tipo}`);
      }
    }
    
    // Iniciar el motor de física principal
    Engine.run(engine);
    
    console.log('Sistema inicializado correctamente');
  } catch (error) {
    console.error('Error al inicializar el sistema:', error);
    alert('Ha ocurrido un error al inicializar el test. Por favor, recarga la página.');
  }
}

// Inicializar al cargar la página
document.addEventListener('DOMContentLoaded', init);
